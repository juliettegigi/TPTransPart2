/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package tptranspart2.vistas;

import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import tptranspart2.accesoADatos.AlumnoData;
import tptranspart2.accesoADatos.InscripcionData;
import tptranspart2.accesoADatos.MateriaData;
import tptranspart2.entidades.Alumno;
import tptranspart2.entidades.Inscripcion;
import tptranspart2.entidades.Materia;

/**
 *
 * @author julie
 */
public class ManipulacionDeNotasView extends javax.swing.JInternalFrame {

    // para crear un objeto para guardar el modelo q va a tener la tabla. a ese 
    //modelo le digo q columnas va a tener la tabla y q fila quiero q visualice la tabla 
    private DefaultTableModel modelo;
    private ArrayList<Inscripcion> listaInscripcion;
    private ArrayList<Materia> listaMaterias;
    private ArrayList<Alumno> listaAlumnos;

    /**
     * Creates new form ManipulacionDeNotasView
     */
    public ManipulacionDeNotasView() {
        initComponents();
        btnActualizar.setEnabled(false);
        modelo = new DefaultTableModel() {
            @Override
             public boolean isCellEditable(int row, int column) {
                return !(column == 0 || column == 1 );
            }
        };

        
        listaMaterias = (ArrayList<Materia>) MateriaData.listarMaterias();
        listaAlumnos = (ArrayList<Alumno>) AlumnoData.listarAlumnosActivos();
        cargarAlumnos();
        armarCabeceraTabla();
        cargarDatos();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lbTitulo = new javax.swing.JLabel();
        lbAlumno = new javax.swing.JLabel();
        cbxAlumno = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabNotas = new javax.swing.JTable();
        btGuardar = new javax.swing.JButton();
        btnActualizar = new javax.swing.JButton();

        setClosable(true);

        lbTitulo.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N
        lbTitulo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbTitulo.setText("Carga de Notas");

        lbAlumno.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        lbAlumno.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbAlumno.setText("Alumno");

        cbxAlumno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxAlumnoActionPerformed(evt);
            }
        });

        tabNotas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tabNotas);

        btGuardar.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        btGuardar.setText("Guardar");
        btGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btGuardarActionPerformed(evt);
            }
        });

        btnActualizar.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        btnActualizar.setText("Actualizar");
        btnActualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActualizarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(btnActualizar)
                .addGap(82, 82, 82)
                .addComponent(btGuardar)
                .addGap(138, 138, 138))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(143, 143, 143)
                        .addComponent(lbTitulo, javax.swing.GroupLayout.PREFERRED_SIZE, 265, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(97, 97, 97)
                        .addComponent(lbAlumno, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(31, 31, 31)
                        .addComponent(cbxAlumno, javax.swing.GroupLayout.PREFERRED_SIZE, 249, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(48, 48, 48)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 453, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(61, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lbTitulo, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbAlumno, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbxAlumno, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 35, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnActualizar)
                    .addComponent(btGuardar))
                .addGap(27, 27, 27))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cbxAlumnoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxAlumnoActionPerformed
        btnActualizar.setEnabled(false);
        cargarDatos();
    }//GEN-LAST:event_cbxAlumnoActionPerformed

    private void btGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btGuardarActionPerformed
        // VAMOS A HACER UN "InscripcionData.actualizarNota(a.getIdAlumno(), m, nota);" CON TODAS LAS ROWS
        Alumno a=(Alumno) cbxAlumno.getSelectedItem();

        // Recorrer la tabla y obtener los datos
        for (int row = 0; row < tabNotas.getRowCount(); row++) {
                // recupero el id de la materia                 
                int m=Integer.parseInt(tabNotas.getValueAt(row, 0).toString());
                // valido que la nota sea válida
                double nota=0.0;
                try{  
                    
                    String notaString=tabNotas.getValueAt(row, 2).toString();
                    if(notaString.contains(",")){
                        String arr[]=notaString.split(",");
                        notaString=arr[0]+"."+arr[1];
                    } 
                    
                   nota =Double.parseDouble(notaString);
                }catch(Exception e){
                 
                    JOptionPane.showMessageDialog(this, "No ha ingresado correctamente la nota");
                     return;
                }
                
                if(nota<0 || nota>10){
                     JOptionPane.showMessageDialog(this, "Ingrese una nota válida(0-10)");
                     return;
                 }
                InscripcionData.actualizarNota(a.getIdAlumno(), m, nota);
               
        }
         JOptionPane.showMessageDialog(this, "Notas actualizadas, actualice para checkear los cambios");
         btnActualizar.setEnabled(true);
    }//GEN-LAST:event_btGuardarActionPerformed

    private void btnActualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActualizarActionPerformed
        modelo.setRowCount(0);
        modelo.setColumnCount(0);
        armarCabeceraTabla();
        cargarDatos();
        btnActualizar.setEnabled(false);
    }//GEN-LAST:event_btnActualizarActionPerformed

    //inicializo el combo box
    public void cargarAlumnos(){
        
        for(Alumno item:listaAlumnos)
            cbxAlumno.addItem(item);
    }
    
    public void armarCabeceraTabla(){
        ArrayList<Object> columns=new ArrayList();
        columns.add("ID");
        columns.add("MATERIA");
        columns.add("NOTA");
        for(Object it:columns)
            modelo.addColumn(it);
        tabNotas.setModel(modelo);
    }
    
    
    public void borrarFilasTabla(){
      int a=modelo.getRowCount()-1;
      for(int i=a;i>=0;i--)
          modelo.removeRow(i);
    }
    
    public void cargarDatos(){
        listaInscripcion = (ArrayList<Inscripcion>) InscripcionData.obtenerInscripciones();
        borrarFilasTabla();
        Alumno a =(Alumno)cbxAlumno.getSelectedItem();
        for(Inscripcion m:listaInscripcion){
            if(m.getAlumno().getIdAlumno()==a.getIdAlumno())
                 modelo.addRow(new Object[]{m.getMateria().getIdMateria(),m.getMateria().getNombre(),m.getNota()});
                
        }
        
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btGuardar;
    private javax.swing.JButton btnActualizar;
    private javax.swing.JComboBox<Alumno> cbxAlumno;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lbAlumno;
    private javax.swing.JLabel lbTitulo;
    private javax.swing.JTable tabNotas;
    // End of variables declaration//GEN-END:variables

}
